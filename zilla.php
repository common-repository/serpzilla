<?php

/*
 * SerpZilla.com --
 *
 * PHP-client, v 0.22, 28.09.2011
 *
 * Should any questions arise please contact our support: support@serpzilla.com
 *
 *
 * Do not edit this file! All setups can be done through constructor parameters
 * Read our FAQ: http://help.serpzilla.com/
 *
 */

// Base class with common routines
class ZILLA_base {

    var $_version = '0.22';

    var $_verbose = false;

    var $_server_list = array('dispenser.serpzilla.com');

    var $_cache_lifetime = 3600;

    var $_cache_reloadtime = 600; // Retry timeout if links retrieval failed

    var $_error = '';

    var $_host = '';

    var $_request_uri = '';

    var $_multi_site = false;

    var $_fetch_remote_type = ''; //[file_get_contents|curl|socket]

    var $_socket_timeout = 6; // Response timeout

    var $_force_show_code = false;

    var $_is_our_bot = false; // Zillabot flag

    var $_db_file = ''; // Path to a data file

    var $_links_delimiter = null;

    var $_use_server_array = false; //Take page url from $_SERVER['REQUEST_URI'] if true, and from getenv('REQUEST_URI') then false;

    var $_debug = false;

    var $_links = array();
    var $_links_page = null;

    var $_zilla_user = '';

    function ZILLA_base($options = null) {

        $host = '';

        if (is_array($options)) {
            if (isset($options['host'])) {
                $host = $options['host'];
            }
        } elseif (strlen($options)) {
            $host = $options;
            $options = array();
        } else {
            $options = array();
        }

        if (isset($options['use_server_array']) && $options['use_server_array'] == true) {
            $this->_use_server_array = true;
        }

        // Host name?
        if (strlen($host)) {
            $this->_host = $host;
        } else {
            $this->_host = $_SERVER['HTTP_HOST'];
        }

        $this->_host = preg_replace('/^http:\/\//', '', $this->_host);
        $this->_host = preg_replace('/^www\./', '', $this->_host);

        // Page uri?
        if (isset($options['request_uri']) && strlen($options['request_uri'])) {
            $this->_request_uri = $options['request_uri'];
        } elseif ($this->_use_server_array === false) {
            $this->_request_uri = getenv('REQUEST_URI');
        }

        if (strlen($this->_request_uri) == 0) {
            $this->_request_uri = $_SERVER['REQUEST_URI'];
        }

        // Multiple sites
        if (isset($options['multi_site']) && $options['multi_site'] == true) {
            $this->_multi_site = true;
        }

        //Debug mode
        if (isset($options['debug']) && $options['debug'] == true) {
            $this->_debug = true;
        }

        // Verbose mode
        if ((isset($options['verbose']) && $options['verbose'] == true) || $this->_debug) {
            $this->_verbose = true;
        }

        if (isset($options['fetch_remote_type']) && strlen($options['fetch_remote_type'])) {
            $this->_fetch_remote_type = $options['fetch_remote_type'];
        }

        if (isset($options['socket_timeout']) && is_numeric($options['socket_timeout']) && $options['socket_timeout'] > 0) {
            $this->_socket_timeout = $options['socket_timeout'];
        }

        // Always display check code
        if (isset($options['force_show_code']) && $options['force_show_code'] == true) {
            $this->_force_show_code = true;
        }

        if (isset($options['zilla_user']) && strlen(trim($options['zilla_user'])) == 32) {
            $this->_zilla_user = $options['zilla_user'];
        } else {
            return $this->raise_error('You must set zilla_user');
        }

        // Zillabot
        if (isset($_COOKIE['zilla_cookie']) && ($_COOKIE['zilla_cookie'] == $this->_zilla_user)) {
            $this->_is_our_bot = true;
            if (isset($_COOKIE['zilla_debug']) && ($_COOKIE['zilla_debug'] == 1)) {
                $this->_debug = true;
                $this->_server_request_uri = $this->_request_uri = $_SERVER['REQUEST_URI'];
                $this->_getenv_request_uri = getenv('REQUEST_URI');
            }
        } else {
            $this->_is_our_bot = false;
        }

        if (isset($options['links_delimiter'])) {
            $this->_links_delimiter = $options['links_delimiter'];
        }

        //Fire
        $this->load_data();
    }

    /*
     * Remote server connection
     */
    function fetch_remote_file($host, $path) {

        $user_agent = $this->_user_agent . ' ' . $this->_version;

        @ini_set('allow_url_fopen', 1);
        @ini_set('default_socket_timeout', $this->_socket_timeout);
        @ini_set('user_agent', $user_agent);
        if (
            $this->_fetch_remote_type == 'file_get_contents'
            ||
            (
                $this->_fetch_remote_type == ''
                &&
                function_exists('file_get_contents')
                &&
                ini_get('allow_url_fopen') == 1
            )
        ) {
            $this->_fetch_remote_type = 'file_get_contents';
            if ($data = @file_get_contents('http://' . $host . $path)) {
                return $data;
            }

        } elseif (
            $this->_fetch_remote_type == 'curl'
            ||
            (
                $this->_fetch_remote_type == ''
                &&
                function_exists('curl_init')
            )
        ) {
            $this->_fetch_remote_type = 'curl';
            if ($ch = @curl_init()) {

                @curl_setopt($ch, CURLOPT_URL, 'http://' . $host . $path);
                @curl_setopt($ch, CURLOPT_HEADER, false);
                @curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                @curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->_socket_timeout);
                @curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);

                if ($data = @curl_exec($ch)) {
                    return $data;
                }

                @curl_close($ch);
            }

        } else {
            $this->_fetch_remote_type = 'socket';
            $buff = '';
            $fp = @fsockopen($host, 80, $errno, $errstr, $this->_socket_timeout);
            if ($fp) {
                @fputs($fp, "GET {$path} HTTP/1.0\r\nHost: {$host}\r\n");
                @fputs($fp, "User-Agent: {$user_agent}\r\n\r\n");
                while (!@feof($fp)) {
                    $buff .= @fgets($fp, 128);
                }
                @fclose($fp);

                $page = explode("\r\n\r\n", $buff);

                return $page[1];
            }

        }

        return $this->raise_error('Can\'t connect to server: ' . $host . $path . ', type: ' . $this->_fetch_remote_type);
    }

    /*
     * Read data
     *
     * @return array('info'=>..., 'links'=>array(requested_url,...)
     */
    function _read() {
    }

    /*
     * Write data
     */
    function _write($data) {
    }

    /*
     * Error handler
     */
    function raise_error($e) {

        $this->_error = '<p style="color: red; font-weight: bold;">SerpZilla ERROR: ' . $e . '</p>';

        if ($this->_verbose == true) {
            print $this->_error;
        }

        return false;
    }


    function is_need_to_reload($data) {
        if($this->_is_our_bot){
            return false;
        }

        if (is_array($data) == false) {
            return true;
        }

        if($this->get_load_time() < (time() - $this->_cache_lifetime)){
            return true;
        }

        return false;
    }

    function  get_data_from_dispenser() {
        $path = $this->_get_dispenser_path();

        foreach ($this->_server_list as $server) {
            if ($data = $this->fetch_remote_file($server, $path)) {
                if (substr($data, 0, 12) == 'FATAL ERROR:') {
                    $this->raise_error($data);
                } else {
                    // consistency check
                    $hash = @unserialize($data);
                    if ($hash != false) {
                        // encoding cache
                        $hash['debug'] = $this->getDebugInfo();

                        $this->_write($hash);
                        return $hash;
                    }
                }
            }
        }

        return false;
    }

    function getDebugInfo() {
        return array(
            'last_update' => time(),
            'multi_site' => $this->_multi_site,
            'fetch_remote_type' => $this->_fetch_remote_type,
            'php_version' => phpversion(),
            'server_software' => $_SERVER['SERVER_SOFTWARE']
        );
    }

    function load_data() {
        $this->clean_session_in_url();

        $data = $this->_read();
        if ($this->is_need_to_reload($data)) {
            // Dispenser request lock
            $this->update_load_time(time() - $this->_cache_lifetime + $this->_cache_reloadtime);

            $data = $this->get_data_from_dispenser();
        }

        $this->_links = $data;

        if (is_null($this->_links_delimiter) && isset($data['info']['__zilla_delimiter__'])) {
            $this->_links_delimiter = $data['info']['__zilla_delimiter__'];
        }

        if (@array_key_exists($this->_request_uri, $data['links']) && is_array($data['links'][$this->_request_uri])) {
            $this->_links_page = $data['links'][$this->_request_uri];
        }
    }

    function update_load_time($time) {
    }

    function clean_session_in_url() {
        // Remove PHPSESSID
        if (strlen(session_id())) {
            $session = session_name() . '=' . session_id();
            $this->_request_uri = str_replace(array('?' . $session . '&', '?' . $session, '&' . $session), array('?', '', ''), $this->_request_uri);
        }
    }

    function _get_dispenser_path() {
        return '/code.php?user=' . $this->_zilla_user . '&host=' . $this->_host;
    }

    /*
    * Link blocks can be split into several parts
    */
    function return_links($n = null, $as_text = true) {
        if (is_array($this->_links_page)) {

            $total_page_links = count($this->_links_page);

            if (!is_numeric($n) || $n > $total_page_links) {
                $n = $total_page_links;
            }

            $links = array();

            for ($i = 1; $i <= $n; $i++) {
                $links[] = array_shift($this->_links_page) . $this->get_check_code();
            }
        } else {
            $links[] = $this->get_check_code();
        }


        if ($this->_debug) {
            $links[] = array_shift($links) . '<hr/><p>' . print_r($this, true) . '</p><hr/>';
        }

        if ($as_text) {
            $links = join($this->_links_delimiter, $links);
        }
        return $links;
    }

    function get_check_code() {
        if ($this->_is_our_bot || $this->_force_show_code) {
            return $this->_links['info']['__zilla_new_url__'];
        }
        return '';
    }

    function get_load_time(){
    }
}

class ZILLA_client extends ZILLA_base {

    var $_user_agent = 'SERPZILLA_Client PHP';

    function ZILLA_client($options = null) {
        if (!defined('_ZILLA_USER')) {
            return $this->raise_error('You must set _ZILLA_USER');
        }else{
            $options['zilla_user']=_ZILLA_USER;
        }


        parent::ZILLA_base($options);
    }


    function _get_db_file() {
        if ($this->_multi_site) {
            return dirname(__FILE__) . '/' . $this->_host . '.z.db';
        } else {
            return dirname(__FILE__) . '/z.db';
        }
    }

    function _read() {
        $this->_db_file = $this->_get_db_file();

        if (!is_file($this->_db_file)) {
            // Try to create file
            if (@touch($this->_db_file)) {
                @chmod($this->_db_file, 0666); // Access mode
            } else {
                return $this->raise_error('File ' . $this->_db_file . ' doesn\'t exist and can\'t be created. Change directory mode to 0777.');
            }
        }

        if (!is_writable($this->_db_file)) {
            return $this->raise_error('Write access to the file ' . $this->_db_file . ' denied! Change directory mode to 0777.');
        }

        @clearstatcache();

        $fp = @fopen($this->_db_file, 'rb');
        @flock($fp, LOCK_SH);
        if ($fp) {
            clearstatcache();
            $length = @filesize($this->_db_file);
            if (function_exists('get_magic_quotes_runtime')) {
                $mqr = @get_magic_quotes_runtime();
                @set_magic_quotes_runtime(0);
            }

            if ($length) {
                $data = @fread($fp, $length);
            } else {
                $data = '';
            }

            if (function_exists('get_magic_quotes_runtime')) {
                @set_magic_quotes_runtime($mqr);
            }

            @flock($fp, LOCK_UN);
            @fclose($fp);

            return @unserialize($data);
        }

        return $this->raise_error('Can\'t read file: ' . $this->_db_file);
    }

    function _write($data) {

        $fp = @fopen($this->_db_file, 'ab');
        if ($fp) {
            if (flock($fp, LOCK_EX | LOCK_NB)) {
                ftruncate($fp, 0);

                if(function_exists('get_magic_quotes_runtime')){
                    $mqr = @get_magic_quotes_runtime();
                    @set_magic_quotes_runtime(0);
                }

                @fwrite($fp, serialize($data));

                if(function_exists('set_magic_quotes_runtime')){
                    @set_magic_quotes_runtime($mqr);
                }

                @flock($fp, LOCK_UN);
                @fclose($fp);

                if (md5($this->_read($this->_db_file)) != md5($data)) {
                    @unlink($this->_db_file);
                    return $this->raise_error('Data integrity violation when writing to file: ' . $this->_db_file);
                }
            } else {
                return false;
            }

            return true;
        }

        return $this->raise_error('Can\'t write to file: ' . $this->_db_file);
    }

    function get_load_time(){
        return filemtime($this->_db_file);
    }

    function update_load_time($time) {
        @touch($this->_db_file, $time);
    }

    function is_need_to_reload($data) {
        if (parent::is_need_to_reload($data)) {
            return true;
        } elseif (filesize($this->_db_file) == 0) {
            return true;
        }

        return false;
    }
}

?>